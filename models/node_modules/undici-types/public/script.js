fetch('http://localhost:4000/api/status')
  .then(res => res.json())
  .then(data => console.log(data));


  const app = require('./app');
const PORT = 4000;

app.listen(PORT, () => {
  console.log(`üåê Server running on port ${PORT}`);
});


process.on('uncaughtException', err => {
  console.error('Uncaught Exception:', err);
});
process.on('unhandledRejection', err => {
  console.error('Unhandled Rejection:', err);
});

// Global state
let currentRole = null;
let currentPage = 'auth';
let currentUser = null;

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    showAuthPage();
});

// Show authentication page
function showAuthPage() {
    document.getElementById('auth-page').classList.add('active');
    document.getElementById('role-selection-page').classList.remove('active');
    currentPage = 'auth';
}

// Show role selection page
function showRoleSelectionPage() {
    document.getElementById('auth-page').classList.remove('active');
    document.getElementById('role-selection-page').classList.add('active');
    currentPage = 'role-selection';
}

// Handle authentication tab switching
function showAuthTab(tab) {
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // Update forms
    document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
    document.getElementById(tab + '-form').classList.add('active');
}

// Handle login
function handleLogin(event) {
    event.preventDefault();
    
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    
    if (email && password) {
        // Mock login - in real app, this would validate with backend
        currentUser = {
            email: email,
            name: 'Demo User',
            role: 'farmer' // Default role for demo
        };
        
        showAlert('Login successful! Welcome to KrushiMitra');
        // Go directly to dashboard instead of role selection
        showDashboard('farmer');
    } else {
        showAlert('Please fill in all fields');
    }
}

// Handle signup
function handleSignup(event) {
    event.preventDefault();
    
    const name = document.getElementById('signup-name').value;
    const email = document.getElementById('signup-email').value;
    const phone = document.getElementById('signup-phone').value;
    const role = document.getElementById('signup-role').value;
    const location = document.getElementById('signup-location').value;
    const password = document.getElementById('signup-password').value;
    const confirmPassword = document.getElementById('signup-confirm-password').value;
    
    // Validation
    if (!name || !email || !phone || !role || !location || !password || !confirmPassword) {
        showAlert('Please fill in all fields');
        return;
    }
    
    if (password !== confirmPassword) {
        showAlert('Passwords do not match');
        return;
    }
    
    if (password.length < 6) {
        showAlert('Password must be at least 6 characters long');
        return;
    }
    
    // Mock signup - in real app, this would save to backend
    currentUser = {
        name: name,
        email: email,
        phone: phone,
        role: role,
        location: location
    };
    
    showAlert('Registration successful! Welcome to KrushiMitra');
    // Go directly to dashboard based on selected role
    showDashboard(role);
}

// Role selection handler
function selectRole(role) {
    currentRole = role;
    showDashboard(role);
}

// Show dashboard based on role
function showDashboard(role) {
    // Hide auth and role selection pages
    document.getElementById('auth-page').classList.remove('active');
    document.getElementById('role-selection-page').classList.remove('active');
    
    // Create dashboard HTML based on role
    const dashboardHTML = createDashboardHTML(role);
    
    // Add dashboard to container
    const container = document.querySelector('.container');
    container.innerHTML = dashboardHTML;
    
    // Add event listeners
    addDashboardEventListeners(role);
}

// Create dashboard HTML based on role
function createDashboardHTML(role) {
    const userName = currentUser ? currentUser.name : 'User';
    const userLocation = currentUser ? currentUser.location : '';
    
    if (role === 'farmer') {
        return `
            <header class="header">
                <div class="header-content">
                    <div>
                        <h1>üåæ KrushiMitra - Farmer Dashboard</h1>
                        <p>Welcome to your farming companion, ${userName}!</p>
                        ${userLocation ? `<p>üìç ${userLocation}</p>` : ''}
                    </div>
                    <div class="profile-avatar" onclick="toggleProfile()">
                        <div class="avatar-circle">
                            <span class="avatar-text">${userName.charAt(0).toUpperCase()}</span>
                        </div>
                    </div>
                </div>
            </header>
            
            <main class="dashboard active">
                <div class="main-cards">
                    <div class="main-card mandi" onclick="showPage('mandi')">
                        <div class="main-card-icon">üåæ</div>
                        <h3>Mandi Prices</h3>
                        <p>Check current crop prices in your area</p>
                    </div>
                    
                    <div class="main-card advisory" onclick="showPage('advisory')">
                        <div class="main-card-icon">üìä</div>
                        <h3>Advisory</h3>
                        <p>Get expert farming advice and tips</p>
                    </div>
                    
                    <div class="main-card services" onclick="showPage('services')">
                        <div class="main-card-icon">üöú</div>
                        <h3>Services</h3>
                        <p>Book farming services and equipment</p>
                    </div>
                    
                    <div class="main-card marketplace" onclick="showPage('marketplace')">
                        <div class="main-card-icon">üõí</div>
                        <h3>Marketplace</h3>
                        <p>Buy seeds, fertilizers, and tools</p>
                    </div>
                </div>
                
                <div id="page-content" class="page-content"></div>
            </main>
        `;
    } else if (role === 'service-provider') {
        return `
            <header class="header">
                <div class="header-content">
                    <div>
                        <h1>üöú KrushiMitra - Service Provider</h1>
                        <p>Welcome to your service dashboard, ${userName}!</p>
                        ${userLocation ? `<p>üìç ${userLocation}</p>` : ''}
                    </div>
                    <div class="profile-avatar" onclick="toggleProfile()">
                        <div class="avatar-circle">
                            <span class="avatar-text">${userName.charAt(0).toUpperCase()}</span>
                        </div>
                    </div>
                </div>
            </header>
            
            <main class="dashboard active">
                <div class="main-cards">
                    <div class="main-card services" onclick="showServiceProviderPage('my-services')">
                        <div class="main-card-icon">üöú</div>
                        <h3>My Services</h3>
                        <p>Manage your service listings</p>
                    </div>
                    
                    <div class="main-card marketplace" onclick="showServiceProviderPage('bookings')">
                        <div class="main-card-icon">üìÖ</div>
                        <h3>Bookings</h3>
                        <p>View and manage bookings</p>
                    </div>
                </div>
                
                <div id="page-content" class="page-content"></div>
            </main>
        `;
    } else if (role === 'admin') {
        return `
            <header class="header">
                <div class="header-content">
                    <div>
                        <h1>üè¢ KrushiMitra - Admin Dashboard</h1>
                        <p>Welcome to your admin panel, ${userName}!</p>
                        ${userLocation ? `<p>üìç ${userLocation}</p>` : ''}
                    </div>
                    <div class="profile-avatar" onclick="toggleProfile()">
                        <div class="avatar-circle">
                            <span class="avatar-text">${userName.charAt(0).toUpperCase()}</span>
                        </div>
                    </div>
                </div>
            </header>
            
            <main class="dashboard active">
                <div class="admin-cards">
                    <div class="admin-card" onclick="showAdminPage('verify')">
                        <div class="admin-card-icon">‚úÖ</div>
                        <h3>Verify Listings</h3>
                        <p>Review and approve service listings</p>
                    </div>
                    
                    <div class="admin-card" onclick="showAdminPage('notifications')">
                        <div class="admin-card-icon">üì¢</div>
                        <h3>Send Notification</h3>
                        <p>Send announcements to users</p>
                    </div>
                </div>
                
                <div id="page-content" class="page-content"></div>
            </main>
        `;
    }
}

// Add event listeners for dashboard
function addDashboardEventListeners(role) {
    // Add back button functionality
    const backBtn = document.querySelector('.back-btn');
    if (backBtn) {
        backBtn.addEventListener('click', () => {
            // Hide page content and show main cards
            const pageContent = document.getElementById('page-content');
            if (pageContent) {
                pageContent.classList.remove('active');
                pageContent.innerHTML = '';
            }
        });
    }
}

// Show specific page content
function showPage(pageName) {
    const pageContent = document.getElementById('page-content');
    
    switch(pageName) {
        case 'mandi':
            pageContent.innerHTML = createMandiPage();
            break;
        case 'advisory':
            pageContent.innerHTML = createAdvisoryPage();
            break;
        case 'services':
            pageContent.innerHTML = createServicesPage();
            break;
        case 'marketplace':
            pageContent.innerHTML = createMarketplacePage();
            break;
    }
    
    pageContent.classList.add('active');
}

// Create Mandi Prices page
function createMandiPage() {
    return `
        <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
        <h2>üåæ Mandi Prices</h2>
        
        <div class="city-selection">
            <h3>Select Your City to View Local Mandi Prices</h3>
            <div class="city-grid">
                <div class="city-card" onclick="selectCity('delhi')">
                    <div class="city-icon">üèõÔ∏è</div>
                    <h4>Delhi</h4>
                    <p>Azadpur, Ghazipur, Okhla</p>
                </div>
                <div class="city-card" onclick="selectCity('mumbai')">
                    <div class="city-icon">üåä</div>
                    <h4>Mumbai</h4>
                    <p>Vashi, Navi Mumbai</p>
                </div>
                <div class="city-card" onclick="selectCity('bangalore')">
                    <div class="city-icon">üå¥</div>
                    <h4>Bangalore</h4>
                    <p>Yeshwanthpur, KR Market</p>
                </div>
                <div class="city-card" onclick="selectCity('kolkata')">
                    <div class="city-icon">üèõÔ∏è</div>
                    <h4>Kolkata</h4>
                    <p>Burdwan, Howrah</p>
                </div>
                <div class="city-card" onclick="selectCity('chennai')">
                    <div class="city-icon">üèñÔ∏è</div>
                    <h4>Chennai</h4>
                    <p>Koyambedu, Madhavaram</p>
                </div>
                <div class="city-card" onclick="selectCity('hyderabad')">
                    <div class="city-icon">üè∞</div>
                    <h4>Hyderabad</h4>
                    <p>Gaddiannaram, Bowenpally</p>
                </div>
            </div>
        </div>
        
        <div id="mandi-prices-content" class="mandi-content" style="display: none;">
            <h3 id="selected-city-name">Selected City</h3>
            <div id="mandi-prices-table"></div>
        </div>
    `;
}

// City selection function
function selectCity(cityName) {
    const cityData = {
        'delhi': {
            name: 'Delhi',
            mandis: ['Azadpur Mandi', 'Ghazipur Mandi', 'Okhla Mandi'],
            prices: [
                { crop: 'Wheat', price: '‚Çπ2,100', mandi: 'Azadpur Mandi', updated: 'Today' },
                { crop: 'Rice', price: '‚Çπ1,850', mandi: 'Ghazipur Mandi', updated: 'Today' },
                { crop: 'Onion', price: '‚Çπ1,200', mandi: 'Okhla Mandi', updated: 'Today' },
                { crop: 'Tomato', price: '‚Çπ800', mandi: 'Azadpur Mandi', updated: 'Today' },
                { crop: 'Potato', price: '‚Çπ1,000', mandi: 'Ghazipur Mandi', updated: 'Today' },
                { crop: 'Cauliflower', price: '‚Çπ1,500', mandi: 'Okhla Mandi', updated: 'Today' }
            ]
        },
        'mumbai': {
            name: 'Mumbai',
            mandis: ['Vashi APMC', 'Navi Mumbai APMC'],
            prices: [
                { crop: 'Wheat', price: '‚Çπ2,200', mandi: 'Vashi APMC', updated: 'Today' },
                { crop: 'Rice', price: '‚Çπ1,900', mandi: 'Navi Mumbai APMC', updated: 'Today' },
                { crop: 'Onion', price: '‚Çπ1,100', mandi: 'Vashi APMC', updated: 'Today' },
                { crop: 'Tomato', price: '‚Çπ900', mandi: 'Navi Mumbai APMC', updated: 'Today' },
                { crop: 'Potato', price: '‚Çπ1,100', mandi: 'Vashi APMC', updated: 'Today' },
                { crop: 'Coconut', price: '‚Çπ2,500', mandi: 'Navi Mumbai APMC', updated: 'Today' }
            ]
        },
        'bangalore': {
            name: 'Bangalore',
            mandis: ['Yeshwanthpur APMC', 'KR Market'],
            prices: [
                { crop: 'Wheat', price: '‚Çπ2,000', mandi: 'Yeshwanthpur APMC', updated: 'Today' },
                { crop: 'Rice', price: '‚Çπ1,750', mandi: 'KR Market', updated: 'Today' },
                { crop: 'Onion', price: '‚Çπ1,300', mandi: 'Yeshwanthpur APMC', updated: 'Today' },
                { crop: 'Tomato', price: '‚Çπ700', mandi: 'KR Market', updated: 'Today' },
                { crop: 'Potato', price: '‚Çπ950', mandi: 'Yeshwanthpur APMC', updated: 'Today' },
                { crop: 'Coconut', price: '‚Çπ2,200', mandi: 'KR Market', updated: 'Today' }
            ]
        },
        'kolkata': {
            name: 'Kolkata',
            mandis: ['Burdwan Mandi', 'Howrah Mandi'],
            prices: [
                { crop: 'Wheat', price: '‚Çπ1,950', mandi: 'Burdwan Mandi', updated: 'Today' },
                { crop: 'Rice', price: '‚Çπ1,800', mandi: 'Howrah Mandi', updated: 'Today' },
                { crop: 'Onion', price: '‚Çπ1,150', mandi: 'Burdwan Mandi', updated: 'Today' },
                { crop: 'Tomato', price: '‚Çπ750', mandi: 'Howrah Mandi', updated: 'Today' },
                { crop: 'Potato', price: '‚Çπ900', mandi: 'Burdwan Mandi', updated: 'Today' },
                { crop: 'Jute', price: '‚Çπ3,500', mandi: 'Howrah Mandi', updated: 'Today' }
            ]
        },
        'chennai': {
            name: 'Chennai',
            mandis: ['Koyambedu Market', 'Madhavaram Market'],
            prices: [
                { crop: 'Wheat', price: '‚Çπ2,050', mandi: 'Koyambedu Market', updated: 'Today' },
                { crop: 'Rice', price: '‚Çπ1,850', mandi: 'Madhavaram Market', updated: 'Today' },
                { crop: 'Onion', price: '‚Çπ1,250', mandi: 'Koyambedu Market', updated: 'Today' },
                { crop: 'Tomato', price: '‚Çπ800', mandi: 'Madhavaram Market', updated: 'Today' },
                { crop: 'Potato', price: '‚Çπ1,050', mandi: 'Koyambedu Market', updated: 'Today' },
                { crop: 'Coconut', price: '‚Çπ2,300', mandi: 'Madhavaram Market', updated: 'Today' }
            ]
        },
        'hyderabad': {
            name: 'Hyderabad',
            mandis: ['Gaddiannaram Market', 'Bowenpally Market'],
            prices: [
                { crop: 'Wheat', price: '‚Çπ2,100', mandi: 'Gaddiannaram Market', updated: 'Today' },
                { crop: 'Rice', price: '‚Çπ1,900', mandi: 'Bowenpally Market', updated: 'Today' },
                { crop: 'Onion', price: '‚Çπ1,200', mandi: 'Gaddiannaram Market', updated: 'Today' },
                { crop: 'Tomato', price: '‚Çπ850', mandi: 'Bowenpally Market', updated: 'Today' },
                { crop: 'Potato', price: '‚Çπ1,000', mandi: 'Gaddiannaram Market', updated: 'Today' },
                { crop: 'Cotton', price: '‚Çπ6,200', mandi: 'Bowenpally Market', updated: 'Today' }
            ]
        }
    };

    const selectedCity = cityData[cityName];
    if (selectedCity) {
        // Update city name
        document.getElementById('selected-city-name').textContent = `${selectedCity.name} - Mandi Prices`;
        
        // Create prices table
        const tableHTML = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Crop</th>
                        <th>Price per Quintal</th>
                        <th>Mandi</th>
                        <th>Last Updated</th>
                    </tr>
                </thead>
                <tbody>
                    ${selectedCity.prices.map(item => `
                        <tr>
                            <td>${item.crop}</td>
                            <td>${item.price}</td>
                            <td>${item.mandi}</td>
                            <td>${item.updated}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        document.getElementById('mandi-prices-table').innerHTML = tableHTML;
        document.getElementById('mandi-prices-content').style.display = 'block';
        
        // Scroll to prices
        document.getElementById('mandi-prices-content').scrollIntoView({ behavior: 'smooth' });
    }
}

// Create Advisory page
function createAdvisoryPage() {
    return `
        <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
        <h2>ü§ñ AI Farming Assistant</h2>
        
        <div class="ai-assistant">
            <div class="ai-header">
                <div class="ai-avatar">ü§ñ</div>
                <div class="ai-info">
                    <h3>KrushiAI Assistant</h3>
                    <p>Get personalized farming advice based on your data</p>
                </div>
            </div>
            
            <div class="ai-chat">
                <div class="chat-messages" id="chat-messages">
                    <div class="ai-message">
                        <div class="message-content">
                            <p>Hello! I'm your AI farming assistant. To provide you with the best advice, I need to know about your farming details. Please fill out the form below.</p>
                        </div>
                    </div>
                </div>
                
                <div class="farmer-data-form">
                    <h4>üìã Tell me about your farming</h4>
                    <form onsubmit="submitFarmerData(event)">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="farm-size">Farm Size (acres)</label>
                                <input type="number" id="farm-size" required placeholder="e.g., 5">
                            </div>
                            <div class="form-group">
                                <label for="soil-type">Soil Type</label>
                                <select id="soil-type" required>
                                    <option value="">Select soil type</option>
                                    <option value="clay">Clay</option>
                                    <option value="sandy">Sandy</option>
                                    <option value="loamy">Loamy</option>
                                    <option value="silty">Silty</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="crops-grown">Crops Grown</label>
                                <input type="text" id="crops-grown" required placeholder="e.g., Wheat, Rice, Vegetables">
                            </div>
                            <div class="form-group">
                                <label for="irrigation-type">Irrigation Type</label>
                                <select id="irrigation-type" required>
                                    <option value="">Select irrigation</option>
                                    <option value="drip">Drip Irrigation</option>
                                    <option value="sprinkler">Sprinkler</option>
                                    <option value="flood">Flood Irrigation</option>
                                    <option value="rainfed">Rainfed</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="current-season">Current Season</label>
                                <select id="current-season" required>
                                    <option value="">Select season</option>
                                    <option value="kharif">Kharif (Monsoon)</option>
                                    <option value="rabi">Rabi (Winter)</option>
                                    <option value="zaid">Zaid (Summer)</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="budget">Monthly Budget (‚Çπ)</label>
                                <input type="number" id="budget" required placeholder="e.g., 50000">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="challenges">Current Challenges (Optional)</label>
                            <textarea id="challenges" placeholder="Describe any specific farming challenges you're facing..."></textarea>
                        </div>
                        
                        <button type="submit" class="ai-submit-btn">Get AI Analysis & Advice</button>
                    </form>
                </div>
            </div>
        </div>
    `;
}

// Create Services page
function createServicesPage() {
    return `
        <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
        <h2>üöú Farming Services</h2>
        <div class="service-cards">
            <div class="service-card">
                <h4>üöú Tractor Service</h4>
                <p>Professional tractor services for plowing, tilling, and field preparation</p>
                <div class="price">‚Çπ800/acre</div>
                <button class="book-btn" onclick="bookService('Tractor Service')">Book Now</button>
            </div>
            
            <div class="service-card">
                <h4>üåæ Harvester Service</h4>
                <p>Modern combine harvesters for efficient crop harvesting</p>
                <div class="price">‚Çπ1,200/acre</div>
                <button class="book-btn" onclick="bookService('Harvester Service')">Book Now</button>
            </div>
            
            <div class="service-card">
                <h4>üí® Pesticide Spraying</h4>
                <p>Professional pesticide and fertilizer spraying services</p>
                <div class="price">‚Çπ300/acre</div>
                <button class="book-btn" onclick="bookService('Pesticide Spraying')">Book Now</button>
            </div>
            
            <div class="service-card">
                <h4>üå± Seed Drilling</h4>
                <p>Precision seed drilling for optimal crop spacing and growth</p>
                <div class="price">‚Çπ400/acre</div>
                <button class="book-btn" onclick="bookService('Seed Drilling')">Book Now</button>
            </div>
            
            <div class="service-card">
                <h4>üöú Irrigation Setup</h4>
                <p>Installation and maintenance of irrigation systems</p>
                <div class="price">‚Çπ2,000/setup</div>
                <button class="book-btn" onclick="bookService('Irrigation Setup')">Book Now</button>
            </div>
            
            <div class="service-card">
                <h4>üåæ Threshing Service</h4>
                <p>Mechanical threshing for grain separation and cleaning</p>
                <div class="price">‚Çπ600/acre</div>
                <button class="book-btn" onclick="bookService('Threshing Service')">Book Now</button>
            </div>
        </div>
    `;
}

// Create Marketplace page
function createMarketplacePage() {
    return `
        <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
        <h2>üõí Marketplace</h2>
        <div class="product-grid">
            <div class="product-card">
                <div class="product-icon">üå±</div>
                <h4>Wheat Seeds</h4>
                <div class="price">‚Çπ45/kg</div>
                <button class="buy-btn" onclick="buyProduct('Wheat Seeds')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üåæ</div>
                <h4>Rice Seeds</h4>
                <div class="price">‚Çπ60/kg</div>
                <button class="buy-btn" onclick="buyProduct('Rice Seeds')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üåø</div>
                <h4>Cotton Seeds</h4>
                <div class="price">‚Çπ120/kg</div>
                <button class="buy-btn" onclick="buyProduct('Cotton Seeds')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üß™</div>
                <h4>NPK Fertilizer</h4>
                <div class="price">‚Çπ25/kg</div>
                <button class="buy-btn" onclick="buyProduct('NPK Fertilizer')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üå±</div>
                <h4>Organic Compost</h4>
                <div class="price">‚Çπ15/kg</div>
                <button class="buy-btn" onclick="buyProduct('Organic Compost')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üîß</div>
                <h4>Farming Tools Kit</h4>
                <div class="price">‚Çπ2,500/set</div>
                <button class="buy-btn" onclick="buyProduct('Farming Tools Kit')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üíß</div>
                <h4>Drip Irrigation Kit</h4>
                <div class="price">‚Çπ8,000/set</div>
                <button class="buy-btn" onclick="buyProduct('Drip Irrigation Kit')">Buy Now</button>
            </div>
            
            <div class="product-card">
                <div class="product-icon">üåø</div>
                <h4>Pesticides</h4>
                <div class="price">‚Çπ180/liter</div>
                <button class="buy-btn" onclick="buyProduct('Pesticides')">Buy Now</button>
            </div>
        </div>
    `;
}

// Service Provider pages
function showServiceProviderPage(pageName) {
    const pageContent = document.getElementById('page-content');
    
    if (pageName === 'my-services') {
        pageContent.innerHTML = `
            <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
            <h2>üöú My Services</h2>
            <div class="service-cards">
                <div class="service-card">
                    <h4>üöú Tractor Service</h4>
                    <p>Status: Active</p>
                    <div class="price">‚Çπ800/acre</div>
                    <button class="book-btn" onclick="editService('Tractor Service')">Edit Service</button>
                </div>
                
                <div class="service-card">
                    <h4>üåæ Harvester Service</h4>
                    <p>Status: Active</p>
                    <div class="price">‚Çπ1,200/acre</div>
                    <button class="book-btn" onclick="editService('Harvester Service')">Edit Service</button>
                </div>
            </div>
        `;
    } else if (pageName === 'bookings') {
        pageContent.innerHTML = `
            <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
            <h2>üìÖ Bookings</h2>
            <div class="advisory-cards">
                <div class="advisory-card">
                    <h4>Farmer: Rajesh Kumar</h4>
                    <p>Service: Tractor Service</p>
                    <p>Date: Tomorrow, 9:00 AM</p>
                    <p>Area: 5 acres</p>
                    <button class="book-btn" onclick="confirmBooking('Tractor Service')">Confirm</button>
                </div>
                
                <div class="advisory-card">
                    <h4>Farmer: Priya Sharma</h4>
                    <p>Service: Harvester Service</p>
                    <p>Date: Day after tomorrow, 10:00 AM</p>
                    <p>Area: 8 acres</p>
                    <button class="book-btn" onclick="confirmBooking('Harvester Service')">Confirm</button>
                </div>
            </div>
        `;
    }
    
    pageContent.classList.add('active');
}

// Admin pages
function showAdminPage(pageName) {
    const pageContent = document.getElementById('page-content');
    
    if (pageName === 'verify') {
        pageContent.innerHTML = `
            <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
            <h2>‚úÖ Verify Listings</h2>
            <div class="advisory-cards">
                <div class="advisory-card">
                    <h4>New Service Provider: John's Tractor Services</h4>
                    <p>Services: Tractor, Harvester, Irrigation</p>
                    <p>Location: Punjab</p>
                    <p>Documents: Submitted</p>
                    <button class="book-btn" onclick="verifyListing('John\'s Tractor Services', true)">Approve</button>
                    <button class="book-btn" onclick="verifyListing('John\'s Tractor Services', false)" style="background: #f44336;">Reject</button>
                </div>
                
                <div class="advisory-card">
                    <h4>New Product: Organic Seeds Co.</h4>
                    <p>Products: Wheat, Rice, Cotton Seeds</p>
                    <p>Location: Haryana</p>
                    <p>Documents: Submitted</p>
                    <button class="book-btn" onclick="verifyListing('Organic Seeds Co.', true)">Approve</button>
                    <button class="book-btn" onclick="verifyListing('Organic Seeds Co.', false)" style="background: #f44336;">Reject</button>
                </div>
            </div>
        `;
    } else if (pageName === 'notifications') {
        pageContent.innerHTML = `
            <button class="back-btn" onclick="hidePage()">‚Üê Back to Dashboard</button>
            <h2>üì¢ Send Notification</h2>
            <div class="advisory-cards">
                <div class="advisory-card">
                    <h4>Weather Alert</h4>
                    <p>Heavy rainfall expected in next 24 hours. Farmers advised to protect their crops.</p>
                    <button class="book-btn" onclick="sendNotification('Weather Alert')">Send to All Farmers</button>
                </div>
                
                <div class="advisory-card">
                    <h4>Mandi Price Update</h4>
                    <p>New mandi prices have been updated. Check the latest rates for your crops.</p>
                    <button class="book-btn" onclick="sendNotification('Mandi Price Update')">Send to All Farmers</button>
                </div>
                
                <div class="advisory-card">
                    <h4>Service Provider Alert</h4>
                    <p>New service providers have joined the platform. Check out their services.</p>
                    <button class="book-btn" onclick="sendNotification('Service Provider Alert')">Send to All Farmers</button>
                </div>
            </div>
        `;
    }
    
    pageContent.classList.add('active');
}

// Hide page content
function hidePage() {
    const pageContent = document.getElementById('page-content');
    pageContent.classList.remove('active');
    pageContent.innerHTML = '';
}

// Book service function
function bookService(serviceName) {
    showAlert(`Service "${serviceName}" booked successfully (Demo)`);
}

// Buy product function
function buyProduct(productName) {
    showAlert(`Order for "${productName}" placed (Demo)`);
}

// Edit service function
function editService(serviceName) {
    showAlert(`Editing service "${serviceName}" (Demo)`);
}

// Confirm booking function
function confirmBooking(serviceName) {
    showAlert(`Booking confirmed for "${serviceName}" (Demo)`);
}

// Verify listing function
function verifyListing(listingName, approved) {
    const action = approved ? 'approved' : 'rejected';
    showAlert(`Listing "${listingName}" ${action} (Demo)`);
}

// Send notification function
function sendNotification(notificationType) {
    showAlert(`Notification "${notificationType}" sent to all users (Demo)`);
}

// Logout function
function logout() {
    currentUser = null;
    currentRole = null;
    showAlert('Logged out successfully');
    
    // Reload the page to reset everything
    location.reload();
}

// Submit farmer data for AI analysis
function submitFarmerData(event) {
    event.preventDefault();
    
    const farmSize = document.getElementById('farm-size').value;
    const soilType = document.getElementById('soil-type').value;
    const cropsGrown = document.getElementById('crops-grown').value;
    const irrigationType = document.getElementById('irrigation-type').value;
    const currentSeason = document.getElementById('current-season').value;
    const budget = document.getElementById('budget').value;
    const challenges = document.getElementById('challenges').value;
    
    // Show loading message
    addAIMessage("Analyzing your farming data... Please wait.", 'ai');
    
    // Simulate AI processing delay
    setTimeout(() => {
        generateAIAdvice(farmSize, soilType, cropsGrown, irrigationType, currentSeason, budget, challenges);
    }, 2000);
}

// Generate AI advice based on farmer data
function generateAIAdvice(farmSize, soilType, cropsGrown, irrigationType, currentSeason, budget, challenges) {
    const advice = analyzeFarmingData(farmSize, soilType, cropsGrown, irrigationType, currentSeason, budget, challenges);
    
    // Clear form
    document.querySelector('.farmer-data-form').style.display = 'none';
    
    // Show AI advice
    addAIMessage(advice, 'ai');
    
    // Add follow-up options
    setTimeout(() => {
        addAIMessage("Would you like me to analyze any specific aspect of your farming in more detail?", 'ai');
        addFollowUpOptions();
    }, 1000);
}

// Analyze farming data and generate advice
function analyzeFarmingData(farmSize, soilType, cropsGrown, irrigationType, currentSeason, budget, challenges) {
    let advice = `## üåæ AI Analysis for Your ${farmSize}-Acre Farm\n\n`;
    
    // Soil analysis
    advice += `### üå± Soil Analysis\n`;
    if (soilType === 'clay') {
        advice += `Your clay soil has good water retention but needs better drainage. Consider adding organic matter and sand to improve structure.\n\n`;
    } else if (soilType === 'sandy') {
        advice += `Sandy soil drains quickly but needs more organic matter. Add compost and use mulch to retain moisture.\n\n`;
    } else if (soilType === 'loamy') {
        advice += `Excellent! Loamy soil is ideal for most crops. Maintain its fertility with regular organic inputs.\n\n`;
    } else if (soilType === 'silty') {
        advice += `Silty soil is fertile but can become compacted. Use cover crops and avoid heavy machinery when wet.\n\n`;
    }
    
    // Irrigation analysis
    advice += `### üíß Irrigation Optimization\n`;
    if (irrigationType === 'drip') {
        advice += `Great choice! Drip irrigation is water-efficient. Consider adding fertigation for better nutrient delivery.\n\n`;
    } else if (irrigationType === 'sprinkler') {
        advice += `Sprinkler irrigation is good for most crops. Time watering for early morning to reduce evaporation.\n\n`;
    } else if (irrigationType === 'flood') {
        advice += `Flood irrigation uses more water. Consider upgrading to drip or sprinkler for better efficiency.\n\n`;
    } else if (irrigationType === 'rainfed') {
        advice += `Rainfed farming requires careful water management. Use mulching and drought-resistant crop varieties.\n\n`;
    }
    
    // Season-specific advice
    advice += `### üå§Ô∏è ${currentSeason.charAt(0).toUpperCase() + currentSeason.slice(1)} Season Recommendations\n`;
    if (currentSeason === 'kharif') {
        advice += `- Plant rice, maize, and cotton varieties suitable for monsoon\n- Prepare for pest management during humid conditions\n- Ensure proper drainage to prevent waterlogging\n\n`;
    } else if (currentSeason === 'rabi') {
        advice += `- Focus on wheat, barley, and winter vegetables\n- Use protective irrigation during dry spells\n- Plan for frost protection if needed\n\n`;
    } else if (currentSeason === 'zaid') {
        advice += `- Grow short-duration crops like moong, urad, and vegetables\n- Use efficient irrigation to combat heat stress\n- Consider shade nets for sensitive crops\n\n`;
    }
    
    // Budget analysis
    const budgetPerAcre = budget / farmSize;
    advice += `### üí∞ Budget Analysis\n`;
    if (budgetPerAcre >= 10000) {
        advice += `Your budget of ‚Çπ${budgetPerAcre.toLocaleString()}/acre is good for quality inputs. Consider investing in:\n- Premium seeds and fertilizers\n- Soil testing and analysis\n- Modern farming equipment\n\n`;
    } else if (budgetPerAcre >= 5000) {
        advice += `Your budget of ‚Çπ${budgetPerAcre.toLocaleString()}/acre is moderate. Focus on:\n- Essential inputs first\n- Organic alternatives to reduce costs\n- Group buying for better prices\n\n`;
    } else {
        advice += `Your budget of ‚Çπ${budgetPerAcre.toLocaleString()}/acre is limited. Prioritize:\n- Low-cost organic methods\n- Seed saving and exchange\n- Government schemes and subsidies\n\n`;
    }
    
    // Crop-specific advice
    advice += `### üåæ Crop-Specific Recommendations\n`;
    const crops = cropsGrown.toLowerCase();
    if (crops.includes('wheat')) {
        advice += `**Wheat:** Use certified seeds, apply nitrogen in splits, and monitor for rust diseases.\n`;
    }
    if (crops.includes('rice')) {
        advice += `**Rice:** Practice SRI method, use resistant varieties, and manage water carefully.\n`;
    }
    if (crops.includes('vegetable')) {
        advice += `**Vegetables:** Use raised beds, practice crop rotation, and focus on high-value crops.\n`;
    }
    if (crops.includes('cotton')) {
        advice += `**Cotton:** Monitor for bollworm, use Bt varieties, and practice proper spacing.\n`;
    }
    advice += `\n`;
    
    // Challenges-specific advice
    if (challenges) {
        advice += `### üîß Addressing Your Challenges\n`;
        const challengeText = challenges.toLowerCase();
        if (challengeText.includes('pest') || challengeText.includes('disease')) {
            advice += `- Implement integrated pest management (IPM)\n- Use resistant varieties and biological controls\n- Regular field monitoring and early detection\n\n`;
        }
        if (challengeText.includes('water') || challengeText.includes('irrigation')) {
            advice += `- Implement water-saving techniques\n- Use mulching and cover crops\n- Consider rainwater harvesting\n\n`;
        }
        if (challengeText.includes('soil') || challengeText.includes('fertility')) {
            advice += `- Conduct soil testing\n- Add organic matter and compost\n- Practice crop rotation and green manuring\n\n`;
        }
    }
    
    // General recommendations
    advice += `### üéØ General Recommendations\n`;
    advice += `1. **Soil Testing:** Get your soil tested every 2-3 years\n`;
    advice += `2. **Crop Rotation:** Rotate crops to maintain soil health\n`;
    advice += `3. **Record Keeping:** Maintain detailed farming records\n`;
    advice += `4. **Technology:** Use weather apps and farming apps for better decisions\n`;
    advice += `5. **Networking:** Join farmer groups for knowledge sharing\n\n`;
    
    advice += `*This analysis is based on your provided data. For specific recommendations, consult local agricultural experts.*`;
    
    return advice;
}

// Add AI message to chat
function addAIMessage(message, type) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `${type}-message`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    
    if (message.includes('##')) {
        // Format as markdown-like content
        contentDiv.innerHTML = message.replace(/\n/g, '<br>').replace(/### (.*?)\n/g, '<h4>$1</h4>').replace(/## (.*?)\n/g, '<h3>$1</h3>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\*(.*?)\*/g, '<em>$1</em>');
    } else {
        contentDiv.innerHTML = `<p>${message}</p>`;
    }
    
    messageDiv.appendChild(contentDiv);
    chatMessages.appendChild(messageDiv);
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Add follow-up options
function addFollowUpOptions() {
    const chatMessages = document.getElementById('chat-messages');
    const optionsDiv = document.createElement('div');
    optionsDiv.className = 'follow-up-options';
    optionsDiv.innerHTML = `
        <div class="option-buttons">
            <button class="option-btn" onclick="askSpecificQuestion('pest')">üêõ Pest Management</button>
            <button class="option-btn" onclick="askSpecificQuestion('soil')">üå± Soil Health</button>
            <button class="option-btn" onclick="askSpecificQuestion('water')">üíß Water Management</button>
            <button class="option-btn" onclick="askSpecificQuestion('crop')">üåæ Crop Planning</button>
            <button class="option-btn" onclick="askSpecificQuestion('finance')">üí∞ Financial Planning</button>
        </div>
    `;
    chatMessages.appendChild(optionsDiv);
}

// Ask specific question
function askSpecificQuestion(topic) {
    const questions = {
        'pest': 'Tell me more about integrated pest management for your crops.',
        'soil': 'Let\'s discuss soil testing and improvement strategies.',
        'water': 'I can help optimize your irrigation and water conservation.',
        'crop': 'Let\'s plan your crop rotation and selection strategy.',
        'finance': 'I can help with budget planning and cost optimization.'
    };
    
    addAIMessage(questions[topic], 'ai');
    
    // Remove follow-up options
    const optionsDiv = document.querySelector('.follow-up-options');
    if (optionsDiv) {
        optionsDiv.remove();
    }
}

// Toggle profile popup
function toggleProfile() {
    const profilePopup = document.getElementById('profile-popup');
    if (profilePopup) {
        profilePopup.remove();
    } else {
        showProfilePopup();
    }
}

// Show profile popup
function showProfilePopup() {
    const userName = currentUser ? currentUser.name : 'User';
    const userEmail = currentUser ? currentUser.email : 'user@example.com';
    const userPhone = currentUser ? currentUser.phone : 'Not provided';
    const userLocation = currentUser ? currentUser.location : 'Not provided';
    const userRole = currentUser ? currentUser.role : 'farmer';
    
    const roleDisplay = {
        'farmer': 'üë®‚Äçüåæ Farmer',
        'service-provider': 'üöú Service Provider',
        'admin': 'üè¢ Admin'
    };
    
    const profileHTML = `
        <div id="profile-popup" class="profile-popup">
            <div class="profile-overlay" onclick="toggleProfile()"></div>
            <div class="profile-content">
                <div class="profile-header">
                    <div class="profile-avatar-large">
                        <span class="avatar-text-large">${userName.charAt(0).toUpperCase()}</span>
                    </div>
                    <h3>${userName}</h3>
                    <p class="profile-role">${roleDisplay[userRole] || 'User'}</p>
                </div>
                
                <div class="profile-details">
                    <div class="profile-item">
                        <div class="profile-icon">üìß</div>
                        <div class="profile-info">
                            <label>Email</label>
                            <span>${userEmail}</span>
                        </div>
                    </div>
                    
                    <div class="profile-item">
                        <div class="profile-icon">üì±</div>
                        <div class="profile-info">
                            <label>Phone</label>
                            <span>${userPhone}</span>
                        </div>
                    </div>
                    
                    <div class="profile-item">
                        <div class="profile-icon">üìç</div>
                        <div class="profile-info">
                            <label>Location</label>
                            <span>${userLocation}</span>
                        </div>
                    </div>
                    
                    <div class="profile-item">
                        <div class="profile-icon">üë§</div>
                        <div class="profile-info">
                            <label>Account Type</label>
                            <span>${roleDisplay[userRole] || 'User'}</span>
                        </div>
                    </div>
                </div>
                
                <div class="profile-actions">
                    <button class="profile-btn edit-btn" onclick="editProfile()">
                        <span class="btn-icon">‚úèÔ∏è</span>
                        Edit Profile
                    </button>
                    <button class="profile-btn settings-btn" onclick="openSettings()">
                        <span class="btn-icon">‚öôÔ∏è</span>
                        Settings
                    </button>
                    <button class="profile-btn close-btn" onclick="toggleProfile()">
                        <span class="btn-icon">‚úï</span>
                        Close
                    </button>
                    <button class="profile-btn logout-btn" onclick="logout()">
                        <span class="btn-icon">üö™</span>
                        Logout
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', profileHTML);
}

// Edit profile function
function editProfile() {
    const userName = currentUser ? currentUser.name : 'User';
    const userEmail = currentUser ? currentUser.email : 'user@example.com';
    const userPhone = currentUser ? currentUser.phone : '';
    const userLocation = currentUser ? currentUser.location : '';
    
    const editHTML = `
        <div id="profile-edit-popup" class="profile-popup">
            <div class="profile-overlay" onclick="closeEditProfile()"></div>
            <div class="profile-content edit-content">
                <div class="profile-header">
                    <h3>Edit Profile</h3>
                    <p>Update your information</p>
                </div>
                
                <form onsubmit="saveProfile(event)" class="profile-edit-form">
                    <div class="form-group">
                        <label for="edit-name">Full Name</label>
                        <input type="text" id="edit-name" value="${userName}" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-email">Email</label>
                        <input type="email" id="edit-email" value="${userEmail}" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-phone">Phone Number</label>
                        <input type="tel" id="edit-phone" value="${userPhone}">
                    </div>
                    
                    <div class="form-group">
                        <label for="edit-location">Location</label>
                        <input type="text" id="edit-location" value="${userLocation}">
                    </div>
                    
                    <div class="profile-actions">
                        <button type="submit" class="profile-btn save-btn">
                            <span class="btn-icon">üíæ</span>
                            Save Changes
                        </button>
                        <button type="button" class="profile-btn cancel-btn" onclick="closeEditProfile()">
                            <span class="btn-icon">‚ùå</span>
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    `;
    
    // Remove existing edit popup
    const existingEdit = document.getElementById('profile-edit-popup');
    if (existingEdit) {
        existingEdit.remove();
    }
    
    document.body.insertAdjacentHTML('beforeend', editHTML);
}

// Close edit profile
function closeEditProfile() {
    const editPopup = document.getElementById('profile-edit-popup');
    if (editPopup) {
        editPopup.remove();
    }
}

// Save profile changes
function saveProfile(event) {
    event.preventDefault();
    
    const newName = document.getElementById('edit-name').value;
    const newEmail = document.getElementById('edit-email').value;
    const newPhone = document.getElementById('edit-phone').value;
    const newLocation = document.getElementById('edit-location').value;
    
    // Update current user data
    if (currentUser) {
        currentUser.name = newName;
        currentUser.email = newEmail;
        currentUser.phone = newPhone;
        currentUser.location = newLocation;
    }
    
    showAlert('Profile updated successfully!');
    closeEditProfile();
    toggleProfile(); // Close and reopen to show updated info
}

// Open settings
function openSettings() {
    showAlert('Settings feature coming soon!');
}

// Show alert function
function showAlert(message) {
    // Remove existing alerts
    const existingAlert = document.querySelector('.alert');
    if (existingAlert) {
        existingAlert.remove();
    }
    
    // Create new alert
    const alert = document.createElement('div');
    alert.className = 'alert';
    alert.textContent = message;
    
    // Add to page
    document.body.appendChild(alert);
    
    // Remove after 3 seconds
    setTimeout(() => {
        alert.remove();
    }, 3000);
}
